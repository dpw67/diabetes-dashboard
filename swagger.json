{
  "swagger" : "2.0",
  "info" : {
    "version" : "0.0.0",
    "title" : "Diabetes Dashboard API",
    "description" : "API for dashboard with my diabetes data",
    "contact" : {
      "name" : "Doug Warren",
      "url" : "http://wordpress.dpw67.com/support",
      "email" : "support@dpw67.oib.com"
    },
    "termsOfService" : "http://wordpress.dpw67.com/terms",
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host" : "localhost:3000",
  "basePath" : "/api",
  "schemes" : [ "http" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "paths" : {
    "/info" : {
      "get" : {
        "tags" : [ "info" ],
        "summary" : "returns basic info of the server",
        "responses" : {
          "200" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/moments" : {
      "get" : {
        "summary" : "Returns all moments",
        "description" : "Returns all moments",
        "operationId" : "findMoments",
        "produces" : [ "application/json", "application/xml", "text/xml", "text/html" ],
        "tags" : [ "moment" ],
        "parameters" : [ {
          "name" : "tags",
          "in" : "query",
          "description" : "tags to filter by",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "csv"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "maximum number of results to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of moments.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Moment"
              }
            }
          },
          "default" : {
            "description" : "unexpected error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post" : {
        "summary" : "Add a new moment to the log",
        "description" : "Creates a new moment in the log. Duplicates are allowed",
        "operationId" : "addMoment",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "tags" : [ "moment" ],
        "parameters" : [ {
          "name" : "moment",
          "in" : "body",
          "description" : "Moment to add to the log",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NewMoment"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "moment response",
            "schema" : {
              "$ref" : "#/definitions/Moment"
            }
          },
          "405" : {
            "description" : "Invalid input"
          },
          "default" : {
            "description" : "unexpected error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "put" : {
        "summary" : "Add a new moment to the log",
        "description" : "Creates a new moment in the log. Duplicates are allowed",
        "operationId" : "updateMoment",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "tags" : [ "moment" ],
        "parameters" : [ {
          "name" : "moment",
          "in" : "body",
          "description" : "Moment to be updated in the log",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NewMoment"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          },
          "404" : {
            "description" : "Moment not found"
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "default" : {
            "description" : "unexpected error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/moments/{momentId}" : {
      "get" : {
        "tags" : [ "moment" ],
        "description" : "Returns a moment by on ID, if the user does not have access to the moment",
        "summary" : "Find moment by ID",
        "operationId" : "findMomentById",
        "produces" : [ "application/json", "application/xml", "text/xml", "text/html" ],
        "parameters" : [ {
          "name" : "momentId",
          "in" : "path",
          "description" : "ID of moment to fetch",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "moment response",
            "schema" : {
              "$ref" : "#/definitions/Moment"
            }
          },
          "default" : {
            "description" : "unexpected error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "moment" ],
        "summary" : "delete a specific moment by ID",
        "description" : "deletes a single moment based on the ID supplied",
        "operationId" : "deleteMoment",
        "parameters" : [ {
          "name" : "momentId",
          "in" : "path",
          "description" : "ID of moment to delete",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "204" : {
            "description" : "moment deleted"
          }
        }
      }
    },
    "/users" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "createUser",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Created user object",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/users/createWithArray" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "description" : "",
        "operationId" : "createUsersWithArrayInput",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "List of user object",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/User"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/users/createWithList" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Creates list of users with given input array",
        "description" : "",
        "operationId" : "createUsersWithListInput",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "List of user object",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/User"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/users/login" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "description" : "",
        "operationId" : "loginUser",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "username",
          "description" : "The user name for login",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "query",
          "name" : "password",
          "description" : "The password for login in clear text",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      }
    },
    "/users/logout" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs out current logged in user session",
        "description" : "",
        "operationId" : "logoutUser",
        "produces" : [ "application/json", "application/xml" ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/users/{username}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user by user name",
        "description" : "",
        "operationId" : "getUserByName",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "username",
          "description" : "The name that needs to be fetched. Use user1 for testing.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "404" : {
            "description" : "User not found"
          },
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Invalid username supplied"
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Updated user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "username",
          "description" : "name that need to be deleted",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Updated user object",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "404" : {
            "description" : "User not found"
          },
          "400" : {
            "description" : "Invalid user supplied"
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteUser",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "username",
          "description" : "The name that needs to be deleted",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "404" : {
            "description" : "User not found"
          },
          "400" : {
            "description" : "Invalid username supplied"
          }
        }
      }
    }
  },
  "definitions" : {
    "Moment" : {
      "type" : "object",
      "required" : [ "momentId", "name", "type", "time", "value" ],
      "properties" : {
        "momentId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string",
          "example" : "check"
        },
        "tag" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "time" : {
          "type" : "string",
          "format" : "date-time"
        },
        "value" : {
          "type" : "string",
          "format" : "double"
        },
        "photoUrls" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "category" : {
          "$ref" : "#/definitions/Category"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Tag"
          }
        },
        "status" : {
          "type" : "string",
          "description" : "Moment status in the log"
        },
        "complete" : {
          "type" : "boolean"
        }
      }
    },
    "NewMoment" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "momentId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "tag" : {
          "type" : "string"
        }
      }
    },
    "ErrorModel" : {
      "type" : "object",
      "required" : [ "code", "message" ],
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "User" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "username" : {
          "type" : "string"
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "phone" : {
          "type" : "string"
        },
        "userStatus" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "User Status"
        }
      }
    },
    "Category" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "Tag" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        }
      }
    }
  }
}